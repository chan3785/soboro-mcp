# Soroswap MCP Server - 프로젝트 규칙

## 📋 프로젝트 개요

### 목적
Stellar Lumens 블록체인 상의 Soroswap DEX와 연동하여 AI 에이전트가 자동으로 토큰 스왑을 수행할 수 있는 MCP (Model Context Protocol) 서버 구축

### 핵심 가치
- **보안 우선**: 모든 거래와 키 관리에서 최고 수준의 보안 보장
- **성능 최적화**: 빠른 응답 시간과 높은 처리량 달성
- **사용자 경험**: 직관적이고 안전한 인터페이스 제공
- **오픈소스**: 투명하고 커뮤니티 중심의 개발

## 🏗️ 아키텍처 규칙

### 기술 스택
- **언어**: TypeScript (엄격한 타입 체크)
- **런타임**: Node.js 18+
- **프레임워크**: MCP SDK
- **블록체인**: Stellar SDK
- **API**: Soroswap API
- **테스팅**: Jest + React Testing Library
- **문서화**: JSDoc + TypeDoc

### 코드 구조
```
src/
├── core/           # 핵심 비즈니스 로직
├── mcp/            # MCP 프로토콜 구현
├── stellar/        # Stellar 블록체인 연동
├── soroswap/       # Soroswap API 클라이언트
├── security/       # 보안 관련 기능
├── utils/          # 유틸리티 함수
├── types/          # TypeScript 타입 정의
└── tests/          # 테스트 파일
```

## 📝 코딩 규칙

### 1. TypeScript 규칙
- 엄격한 타입 체크 활성화 (`strict: true`)
- 모든 함수와 변수에 명시적 타입 지정
- 인터페이스 우선 설계 (클래스 대신)
- 제네릭 활용으로 재사용성 향상

```typescript
// ✅ 좋은 예시
interface SwapRequest {
  fromToken: string;
  toToken: string;
  amount: number;
  slippage: number;
}

const executeSwap = async (request: SwapRequest): Promise<SwapResult> => {
  // 구현
};

// ❌ 피해야 할 예시
const executeSwap = async (from: any, to: any, amount: any) => {
  // 타입 안전성 부족
};
```

### 2. 에러 처리 규칙
- 모든 비동기 함수에 try-catch 블록 사용
- 커스텀 에러 클래스 정의 및 사용
- 상세한 에러 메시지와 로깅
- 사용자 친화적인 에러 응답

```typescript
class SoroswapError extends Error {
  constructor(
    message: string,
    public code: string,
    public details?: Record<string, any>
  ) {
    super(message);
    this.name = 'SoroswapError';
  }
}

const safeExecute = async <T>(operation: () => Promise<T>): Promise<T> => {
  try {
    return await operation();
  } catch (error) {
    logger.error('Operation failed', { error });
    throw new SoroswapError(
      '거래 실행 중 오류가 발생했습니다',
      'EXECUTION_FAILED',
      { originalError: error }
    );
  }
};
```

### 3. 보안 규칙
- 민감한 정보는 환경 변수로 관리
- 키 로테이션 정책 수립
- 입력값 검증 (Zod 스키마 사용)
- 슬리피지 보호 메커니즘 구현

```typescript
import { z } from 'zod';

const SwapRequestSchema = z.object({
  fromToken: z.string().min(1),
  toToken: z.string().min(1),
  amount: z.number().positive(),
  slippage: z.number().min(0.1).max(50)
});

const validateSwapRequest = (data: unknown): SwapRequest => {
  return SwapRequestSchema.parse(data);
};
```

## 🔧 개발 규칙

### 1. Git 워크플로우
- **브랜치 전략**: Git Flow 사용
  - `main`: 프로덕션 코드
  - `develop`: 개발 브랜치
  - `feature/*`: 기능 개발
  - `hotfix/*`: 긴급 수정
  - `release/*`: 릴리스 준비

- **커밋 메시지**: Conventional Commits 규칙
```
feat: add token swap functionality
fix: resolve slippage calculation bug
docs: update API documentation
test: add unit tests for swap validation
refactor: improve error handling in stellar client
```

### 2. 코드 리뷰 규칙
- 모든 PR은 최소 1명의 리뷰어 승인 필요
- 보안 관련 코드는 2명의 승인 필요
- 자동화된 테스트 통과 필수
- 코드 커버리지 80% 이상 유지

### 3. 테스트 규칙
- 단위 테스트: 모든 비즈니스 로직
- 통합 테스트: API 연동 및 블록체인 상호작용
- E2E 테스트: 전체 스왑 플로우
- 모킹을 통한 외부 의존성 격리

```typescript
describe('Token Swap', () => {
  it('should execute swap successfully', async () => {
    const mockStellarClient = createMockStellarClient();
    const swapService = new SwapService(mockStellarClient);
    
    const result = await swapService.executeSwap({
      fromToken: 'XLM',
      toToken: 'USDC',
      amount: 100,
      slippage: 1.0
    });
    
    expect(result.success).toBe(true);
    expect(result.transactionHash).toBeDefined();
  });
});
```

## 🚀 배포 규칙

### 1. 환경 관리
- **개발**: 로컬 개발 환경
- **스테이징**: 테스트넷 연동
- **프로덕션**: 메인넷 연동

### 2. CI/CD 파이프라인
```yaml
# GitHub Actions 예시
name: CI/CD Pipeline
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run test
      - run: npm run test:coverage
      
  security:
    runs-on: ubuntu-latest
    steps:
      - run: npm audit
      - run: npm run security:scan
```

### 3. 모니터링 규칙
- 로그 수집 및 분석 (Winston 사용)
- 메트릭 모니터링 (Prometheus + Grafana)
- 알람 시스템 (Slack/Discord 연동)
- 성능 대시보드 구축

## 📊 성능 규칙

### 1. 응답 시간 목표
- 가격 조회: < 2초
- 스왑 실행: < 10초
- 잔액 확인: < 1초
- 거래 히스토리: < 3초

### 2. 처리량 목표
- 동시 요청 처리: 10 TPS
- API 호출 제한 준수
- 메모리 사용량 최적화

### 3. 최적화 기법
- 캐싱 전략 구현 (Redis 사용)
- 데이터베이스 쿼리 최적화
- 비동기 처리 활용
- 코드 스플리팅 및 지연 로딩

## 🛡️ 보안 규칙

### 1. 키 관리
```typescript
class SecureKeyManager {
  private readonly keyVault: KeyVault;
  
  async getPrivateKey(accountId: string): Promise<string> {
    // 하드웨어 지갑 또는 보안 저장소에서 키 조회
    return await this.keyVault.getSecret(`stellar-key-${accountId}`);
  }
  
  async rotateKey(accountId: string): Promise<void> {
    // 키 로테이션 로직
  }
}
```

### 2. 거래 검증
- 트랜잭션 서명 전 검증
- 슬리피지 보호 메커니즘
- 최대 거래 한도 설정
- 의심스러운 활동 감지

### 3. 입력 검증
- 모든 사용자 입력 검증
- SQL 인젝션 방지
- XSS 공격 방지
- Rate limiting 구현

## 📚 문서화 규칙

### 1. 코드 문서화
- JSDoc 주석 필수
- 복잡한 로직에 대한 상세 설명
- API 엔드포인트 문서화
- 예시 코드 포함

```typescript
/**
 * 토큰 스왑을 실행합니다.
 * 
 * @param request - 스왑 요청 정보
 * @param request.fromToken - 교환할 토큰 심볼
 * @param request.toToken - 교환받을 토큰 심볼
 * @param request.amount - 교환할 수량
 * @param request.slippage - 허용 슬리피지 (%)
 * 
 * @returns 스왑 실행 결과
 * 
 * @example
 * ```typescript
 * const result = await swapTokens({
 *   fromToken: 'XLM',
 *   toToken: 'USDC',
 *   amount: 100,
 *   slippage: 1.0
 * });
 * ```
 */
async function swapTokens(request: SwapRequest): Promise<SwapResult>
```

### 2. README 문서
- 프로젝트 개요 및 목적
- 설치 및 설정 가이드
- 사용 예시 및 API 문서
- 기여 가이드라인
- 라이선스 정보

### 3. API 문서
- OpenAPI/Swagger 스펙 작성
- 요청/응답 예시
- 에러 코드 및 메시지
- 인증 방법 설명

## 🤝 커뮤니티 규칙

### 1. 기여 가이드라인
- 이슈 템플릿 사용
- PR 템플릿 사용
- 코드 스타일 가이드 준수
- 테스트 코드 작성 필수

### 2. 커뮤니케이션
- GitHub Discussions 활용
- Discord 서버 운영
- 정기 개발자 미팅
- 투명한 의사결정 프로세스

### 3. 라이선스 및 법적 고려사항
- MIT 라이선스 적용
- 오픈소스 의존성 검토
- 보안 취약점 공개 정책
- 개인정보 보호 정책

## 📈 품질 관리 규칙

### 1. 코드 품질
- ESLint 규칙 준수
- Prettier 포맷팅 적용
- SonarQube 정적 분석
- 정기 코드 리팩토링

### 2. 테스트 품질
- 테스트 커버리지 80% 이상
- 통합 테스트 자동화
- 성능 테스트 정기 실행
- 보안 테스트 수행

### 3. 문서 품질
- 정기 문서 업데이트
- 사용자 피드백 반영
- 다국어 지원 (한국어/영어)
- 접근성 가이드라인 준수

## 🎯 성공 지표

### 1. 기술적 지표
- 코드 커버리지: > 80%
- 평균 응답 시간: < 5초
- 스왑 성공률: > 95%
- 보안 취약점: 0개

### 2. 사용자 지표
- 사용자 만족도: > 4.5/5
- 활성 사용자 수 증가
- GitHub 스타 수 증가
- 커뮤니티 참여도 향상

### 3. 비즈니스 지표
- 거래량 증가
- 파트너십 확대
- 수익성 개선
- 시장 점유율 확대

## 🔄 지속적 개선

### 1. 정기 리뷰
- 월간 성과 리뷰
- 분기별 목표 점검
- 연간 전략 수립
- 사용자 피드백 분석

### 2. 기술 업데이트
- 최신 보안 패치 적용
- 성능 최적화 지속
- 새로운 기능 개발
- 기술 부채 해결

### 3. 커뮤니티 성장
- 개발자 온보딩 개선
- 문서화 지속 업데이트
- 이벤트 및 워크샵 개최
- 오픈소스 생태계 기여

---

**이 규칙 문서는 프로젝트의 성공적인 개발과 운영을 위한 가이드라인입니다. 모든 팀원과 기여자가 이 규칙을 준수하여 고품질의 Soroswap MCP Server를 만들어 나가겠습니다.**
description:
globs:
alwaysApply: false
---
